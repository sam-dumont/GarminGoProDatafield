// Code generated by protoc-gen-monkeyc. DO NOT EDIT.

import Toybox.Lang;

class ResponseGeneric {
    public var result as ERG;
    
    public function initialize() {
        result = 0 as ERG;
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, result, false));
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    result = d.varint32() as ERG;
                    break;
                }
            }
        }
    }
    
    public function GetResult() as ERG {
        return result;
    }
}

class Media {
    public var folder as String;
    public var file as String;
    
    public function initialize() {
        folder = "";
        file = "";
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldLen(1, folder, false));
        result.addAll(Protobuf.encodeFieldLen(2, file, false));
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    folder = d.string();
                    break;
                }
                case 2: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    file = d.string();
                    break;
                }
            }
        }
    }
    
    public function GetFolder() as String {
        return folder;
    }
    
    public function GetFile() as String {
        return file;
    }
}

enum ERG { ERG_U = 0, ERG_S = 1, ERG_IF = 2, ERG_NS = 3, ERG_OB = 4, ERG_IV = 5, ERG_NA = 6 }

var ERGValue as Dictionary<ERG, String> = { ERG_U => "U", ERG_S => "S", ERG_IF => "IF", ERG_NS => "NS", ERG_OB => "OB", ERG_IV => "IV", ERG_NA => "NA" } as Dictionary<ERG, String>;

class NotifyPresetStatus {
    public var presetGroupArray as Array<PresetGroup>;
    
    public function initialize() {
        presetGroupArray = [];
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        for (var i = 0; i < presetGroupArray.size(); i++) {
            result.addAll(Protobuf.encodeFieldLen(1, presetGroupArray[i].Encode(), true));
        }
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        d.debugPosition("NotifyPresetStatus: start");
        while (d.remaining() > 0) {
            var tag = d.varint32();
            Toybox.System.println("[PROTOBUF DEBUG] NotifyPresetStatus: tag=" + tag + ", field=" + (tag >> 3) + ", wiretype=" + (tag & 7));
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    d.debugPosition("NotifyPresetStatus: before PresetGroup");
                    var msg = new PresetGroup();
                    msg.Decode(d.data());
                    presetGroupArray.add(msg);
                    d.debugPosition("NotifyPresetStatus: after PresetGroup");
                    break;
                }
                default: {
                    // Skip unknown fields based on wire type
                    var wireType = tag & 7;
                    Toybox.System.println("[PROTOBUF DEBUG] Skipping unknown field: " + (tag >> 3) + ", wireType=" + wireType);
                    if (wireType == Protobuf.VARINT) {
                        d.varint32();
                    } else if (wireType == Protobuf.LEN) {
                        d.data();
                    } else if (wireType == Protobuf.I32) {
                        d.number();
                    } else if (wireType == Protobuf.I64) {
                        d.long();
                    } else {
                        Toybox.System.println("[PROTOBUF ERROR] Unknown wire type: " + wireType + ". Skipping 1 byte.");
                        d.data(); // fallback: skip as length-delimited
                    }
                    break;
                }
            }
        }
        d.debugPosition("NotifyPresetStatus: end");
    }
    
    public function GetPresetGroupArray() as Array<PresetGroup> {
        if (presetGroupArray != null) {
            return presetGroupArray;
        }
        return [];
    }
}

class Preset {
    public var id as Number;
    public var mode as EFM;
    public var titleId as EPT;
    public var titleNumber as Number;
    public var userDefined as Boolean;
    public var icon as EPI;
    public var settingArray as Array<PresetSetting>;
    public var isModified as Boolean;
    public var isFixed as Boolean;
    public var customName as String;
    
    public function initialize() {
        id = 0;
        mode = 0 as EFM;
        titleId = 0 as EPT;
        titleNumber = 0;
        userDefined = false;
        icon = 0 as EPI;
        settingArray = [];
        isModified = false;
        isFixed = false;
        customName = "";
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, id, false));
        result.addAll(Protobuf.encodeFieldVarint(2, mode, false));
        result.addAll(Protobuf.encodeFieldVarint(3, titleId, false));
        result.addAll(Protobuf.encodeFieldVarint(4, titleNumber, false));
        result.addAll(Protobuf.encodeFieldVarint(5, userDefined, false));
        result.addAll(Protobuf.encodeFieldVarint(6, icon, false));
        for (var i = 0; i < settingArray.size(); i++) {
            result.addAll(Protobuf.encodeFieldLen(7, settingArray[i].Encode(), true));
        }
        result.addAll(Protobuf.encodeFieldVarint(8, isModified, false));
        result.addAll(Protobuf.encodeFieldVarint(9, isFixed, false));
        result.addAll(Protobuf.encodeFieldLen(10, customName, false));
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    id = d.varint32();
                    break;
                }
                case 2: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    mode = d.varint32() as EFM;
                    break;
                }
                case 3: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    titleId = d.varint32() as EPT;
                    break;
                }
                case 4: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    titleNumber = d.varint32();
                    break;
                }
                case 5: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    userDefined = d.varint32() != 0;
                    break;
                }
                case 6: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    icon = d.varint32() as EPI;
                    break;
                }
                case 7: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    var msg = new PresetSetting();
                    msg.Decode(d.data());
                    settingArray.add(msg);
                    break;
                }
                case 8: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    isModified = d.varint32() != 0;
                    break;
                }
                case 9: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    isFixed = d.varint32() != 0;
                    break;
                }
                case 10: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    customName = d.string();
                    break;
                }
            }
        }
    }
    
    public function GetId() as Number {
        return id;
    }
    
    public function GetMode() as EFM {
        return mode;
    }
    
    public function GetTitleId() as EPT {
        return titleId;
    }
    
    public function GetTitleNumber() as Number {
        return titleNumber;
    }
    
    public function GetUserDefined() as Boolean {
        return userDefined;
    }
    
    public function GetIcon() as EPI {
        return icon;
    }
    
    public function GetSettingArray() as Array<PresetSetting> {
        if (settingArray != null) {
            return settingArray;
        }
        return [];
    }
    
    public function GetIsModified() as Boolean {
        return isModified;
    }
    
    public function GetIsFixed() as Boolean {
        return isFixed;
    }
    
    public function GetCustomName() as String {
        return customName;
    }
}

class RequestCustomPresetUpdate {
    public var titleId as EPT;
    public var customName as String;
    public var iconId as EPI;
    
    public function initialize() {
        titleId = 0 as EPT;
        customName = "";
        iconId = 0 as EPI;
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, titleId, false));
        result.addAll(Protobuf.encodeFieldLen(2, customName, false));
        result.addAll(Protobuf.encodeFieldVarint(3, iconId, false));
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    titleId = d.varint32() as EPT;
                    break;
                }
                case 2: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    customName = d.string();
                    break;
                }
                case 3: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    iconId = d.varint32() as EPI;
                    break;
                }
            }
        }
    }
    
    public function GetTitleId() as EPT {
        return titleId;
    }
    
    public function GetCustomName() as String {
        return customName;
    }
    
    public function GetIconId() as EPI {
        return iconId;
    }
}

class PresetGroup {
    public var id as EPG;
    public var presetArray as Array<Preset>;
    public var canAddPreset as Boolean;
    public var icon as EPGI;
    public var modeArray as Array<EFM>;
    
    public function initialize() {
        id = 0 as EPG;
        presetArray = [];
        canAddPreset = false;
        icon = 0 as EPGI;
        modeArray = [];
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, id, false));
        for (var i = 0; i < presetArray.size(); i++) {
            result.addAll(Protobuf.encodeFieldLen(2, presetArray[i].Encode(), true));
        }
        result.addAll(Protobuf.encodeFieldVarint(3, canAddPreset, false));
        result.addAll(Protobuf.encodeFieldVarint(4, icon, false));
        {
            var packed = []b;
            for (var i = 0; i < modeArray.size(); i++) {
                packed.addAll(Protobuf.encodeFieldVarint(0, modeArray[i], true));
            }
            result.addAll(Protobuf.encodeFieldLen(5, packed, false));
        }
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    id = d.varint32() as EPG;
                    break;
                }
                case 2: {
                    Protobuf.assertWireType(tag, Protobuf.LEN);
                    var msg = new Preset();
                    msg.Decode(d.data());
                    presetArray.add(msg);
                    break;
                }
                case 3: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    canAddPreset = d.varint32() != 0;
                    break;
                }
                case 4: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    icon = d.varint32() as EPGI;
                    break;
                }
                case 5: {
                    switch (tag & 7) {
                        case Protobuf.VARINT:
                            modeArray.add(d.varint32() as EFM);
                            break;
                        case Protobuf.LEN:
                            for (var endRemaining = d.remaining() - d.varint32(); d.remaining() > endRemaining;) {
                                modeArray.add(d.varint32() as EFM);
                            }
                            break;
                        default:
                            throw new Protobuf.Exception("invalid wire type");
                    }
                    break;
                }
            }
        }
    }
    
    public function GetId() as EPG {
        return id;
    }
    
    public function GetPresetArray() as Array<Preset> {
        if (presetArray != null) {
            return presetArray;
        }
        return [];
    }
    
    public function GetCanAddPreset() as Boolean {
        return canAddPreset;
    }
    
    public function GetIcon() as EPGI {
        return icon;
    }
    
    public function GetModeArray() as Array<EFM> {
        return modeArray;
    }
}

class PresetSetting {
    public var id as Number;
    public var value as Number;
    public var isCaption as Boolean;
    
    public function initialize() {
        id = 0;
        value = 0;
        isCaption = false;
    }
    
    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, id, false));
        result.addAll(Protobuf.encodeFieldVarint(2, value, false));
        result.addAll(Protobuf.encodeFieldVarint(3, isCaption, false));
        return result;
    }
    
    public function Decode(input as ByteArray) as Void {
        var d = new Protobuf.Decoder(input);
        while (d.remaining() > 0) {
            var tag = d.varint32();
            switch (tag >> 3) {
                case 1: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    id = d.varint32();
                    break;
                }
                case 2: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    value = d.varint32();
                    break;
                }
                case 3: {
                    Protobuf.assertWireType(tag, Protobuf.VARINT);
                    isCaption = d.varint32() != 0;
                    break;
                }
            }
        }
    }
    
    public function GetId() as Number {
        return id;
    }
    
    public function GetValue() as Number {
        return value;
    }
    
    public function GetIsCaption() as Boolean {
        return isCaption;
    }
}

enum EFM { EFM_U = -1, EFM_PB = 4, EFM_ST = 5, EFM_V = 12, EFM_TLV = 13, EFM_L = 15, EFM_PS = 16, EFM_PH = 17, EFM_PN = 18, EFM_PB2 = 19, EFM_TLP = 20, EFM_NLP = 21, EFM_BR = 22, EFM_BB = 23, EFM_TWV = 24, EFM_LB = 25, EFM_NLV = 26, EFM_SM = 27, EFM_ID = 28, EFM_VS = 29, EFM_VL = 30, EFM_LT = 31, EFM_BS = 32 }

var EFMValue as Dictionary<EFM, String> = { EFM_U => "U", EFM_PB => "PB", EFM_ST => "ST", EFM_V => "V", EFM_TLV => "TLV", EFM_L => "L", EFM_PS => "PS", EFM_PH => "PH", EFM_PN => "PN", EFM_PB2 => "PB2", EFM_TLP => "TLP", EFM_NLP => "NLP", EFM_BR => "BR", EFM_BB => "BB", EFM_TWV => "TWV", EFM_LB => "LB", EFM_NLV => "NLV", EFM_SM => "SM", EFM_ID => "ID", EFM_VS => "VS", EFM_VL => "VL", EFM_LT => "LT", EFM_BS => "BS" } as Dictionary<EFM, String>;

enum EPG { EPG_V = 1000, EPG_P = 1001, EPG_T = 1002 }

var EPGValue as Dictionary<EPG, String> = { EPG_V => "V", EPG_P => "P", EPG_T => "T" } as Dictionary<EPG, String>;

enum EPGI { EPGI_V = 0, EPGI_P = 1, EPGI_T = 2 }

var EPGIValue as Dictionary<EPGI, String> = { EPGI_V => "V", EPGI_P => "P", EPGI_T => "T" } as Dictionary<EPGI, String>;

enum EPI { EPI_V = 0, EPI_A = 1, EPI_C = 2, EPI_PH = 3, EPI_LB = 4, EPI_BU = 5, EPI_PN = 6, EPI_TW = 7, EPI_TL = 8, EPI_NL = 9, EPI_SN = 10, EPI_V2 = 11, EPI_P2 = 13, EPI_PA = 14, EPI_B2 = 15, EPI_TW2 = 16, EPI_CU = 18, EPI_AR = 19, EPI_BK = 20, EPI_EP = 21, EPI_IN = 22, EPI_MO = 23, EPI_MT = 24, EPI_OD = 25, EPI_PV = 26, EPI_SF = 27, EPI_SK = 28, EPI_SN2 = 29, EPI_TR = 30, EPI_TV = 31, EPI_WT = 32, EPI_LO = 33, EPI_ST = 34, EPI_AC2 = 35, EPI_FC = 36, EPI_SU = 37, EPI_CT = 38, EPI_SH = 39, EPI_CH = 40, EPI_HE = 41, EPI_BI = 42, EPI_CC = 43, EPI_VL = 44, EPI_FP = 45, EPI_HD = 46, EPI_LA = 47, EPI_LG = 48, EPI_CS = 49, EPI_TP = 50, EPI_MV2 = 55, EPI_MP2 = 56, EPI_MT2 = 57, EPI_BC = 58, EPI_US = 59, EPI_SE = 60, EPI_AE = 61, EPI_CE = 62, EPI_SO = 63, EPI_S1 = 64, EPI_S2 = 65, EPI_S3 = 66, EPI_S4 = 67, EPI_SSP = 70, EPI_SNP = 71, EPI_HQV = 73, EPI_EMP = 74, EPI_LOB = 75, EPI_STR = 76, EPI_LPA = 77, EPI_LTR = 78, EPI_FF = 79, EPI_EMV = 80, EPI_EMP2 = 81, EPI_EMT = 82, EPI_EMS = 83, EPI_EMA = 84, EPI_EML = 85, EPI_MST = 89, EPI_MLP = 90, EPI_MLT = 91, EPI_ESP = 100, EPI_EHP = 101, EPI_BS2 = 102, EPI_TPP = 1000, EPI_NLP = 1001 }

var EPIValue as Dictionary<EPI, String> = { EPI_V => "V", EPI_A => "A", EPI_C => "C", EPI_PH => "PH", EPI_LB => "LB", EPI_BU => "BU", EPI_PN => "PN", EPI_TW => "TW", EPI_TL => "TL", EPI_NL => "NL", EPI_SN => "SN", EPI_V2 => "V2", EPI_P2 => "P2", EPI_PA => "PA", EPI_B2 => "B2", EPI_TW2 => "TW2", EPI_CU => "CU", EPI_AR => "AR", EPI_BK => "BK", EPI_EP => "EP", EPI_IN => "IN", EPI_MO => "MO", EPI_MT => "MT", EPI_OD => "OD", EPI_PV => "PV", EPI_SF => "SF", EPI_SK => "SK", EPI_SN2 => "SN2", EPI_TR => "TR", EPI_TV => "TV", EPI_WT => "WT", EPI_LO => "LO", EPI_ST => "ST", EPI_AC2 => "AC2", EPI_FC => "FC", EPI_SU => "SU", EPI_CT => "CT", EPI_SH => "SH", EPI_CH => "CH", EPI_HE => "HE", EPI_BI => "BI", EPI_CC => "CC", EPI_VL => "VL", EPI_FP => "FP", EPI_HD => "HD", EPI_LA => "LA", EPI_LG => "LG", EPI_CS => "CS", EPI_TP => "TP", EPI_MV2 => "MV2", EPI_MP2 => "MP2", EPI_MT2 => "MT2", EPI_BC => "BC", EPI_US => "US", EPI_SE => "SE", EPI_AE => "AE", EPI_CE => "CE", EPI_SO => "SO", EPI_S1 => "S1", EPI_S2 => "S2", EPI_S3 => "S3", EPI_S4 => "S4", EPI_SSP => "SSP", EPI_SNP => "SNP", EPI_HQV => "HQV", EPI_EMP => "EMP", EPI_LOB => "LOB", EPI_STR => "STR", EPI_LPA => "LPA", EPI_LTR => "LTR", EPI_FF => "FF", EPI_EMV => "EMV", EPI_EMP2 => "EMP2", EPI_EMT => "EMT", EPI_EMS => "EMS", EPI_EMA => "EMA", EPI_EML => "EML", EPI_MST => "MST", EPI_MLP => "MLP", EPI_MLT => "MLT", EPI_ESP => "ESP", EPI_EHP => "EHP", EPI_BS2 => "BS2", EPI_TPP => "TPP", EPI_NLP => "NLP" } as Dictionary<EPI, String>;

enum EPT { EPT_AC = 0, EPT_ST = 1, EPT_CI = 2, EPT_PH = 3, EPT_LB = 4, EPT_BU = 5, EPT_NI = 6, EPT_TW = 7, EPT_TL = 8, EPT_NL = 9, EPT_VI = 10, EPT_SM = 11, EPT_P2 = 13, EPT_PA = 14, EPT_TW2 = 16, EPT_CU = 18, EPT_AR = 19, EPT_BK = 20, EPT_EP = 21, EPT_IN = 22, EPT_MO = 23, EPT_MT = 24, EPT_OD = 25, EPT_PV = 26, EPT_SF = 27, EPT_SK = 28, EPT_SN = 29, EPT_TR = 30, EPT_TV = 31, EPT_WT = 32, EPT_LO = 33, EPT_ST2 = 34, EPT_AC2 = 35, EPT_FC = 36, EPT_SU = 37, EPT_CT = 38, EPT_SH = 39, EPT_CH = 40, EPT_HE = 41, EPT_BI = 42, EPT_CC = 43, EPT_VL = 44, EPT_FP = 45, EPT_HD = 46, EPT_LA = 47, EPT_LG = 48, EPT_CS = 49, EPT_TP = 50, EPT_BC = 58, EPT_US = 59, EPT_SE = 60, EPT_AE = 61, EPT_CE = 62, EPT_SO = 63, EPT_S1 = 64, EPT_S2 = 65, EPT_S3 = 66, EPT_S4 = 67, EPT_SV = 68, EPT_STW = 69, EPT_SSP = 70, EPT_SNP = 71, EPT_SVE = 72, EPT_HQ = 73, EPT_EB = 74, EPT_LB2 = 75, EPT_STR = 76, EPT_LPA = 77, EPT_LTR = 78, EPT_FF = 79, EPT_SQV = 82, EPT_BQV = 83, EPT_HQV = 93, EPT_UDCN = 94, EPT_ESP = 99, EPT_EHP = 100, EPT_BS2 = 106, EPT_V43 = 125, EPT_V169 = 126, EPT_S169 = 127 }

var EPTValue as Dictionary<EPT, String> = { EPT_AC => "AC", EPT_ST => "ST", EPT_CI => "CI", EPT_PH => "PH", EPT_LB => "LB", EPT_BU => "BU", EPT_NI => "NI", EPT_TW => "TW", EPT_TL => "TL", EPT_NL => "NL", EPT_VI => "VI", EPT_SM => "SM", EPT_P2 => "P2", EPT_PA => "PA", EPT_TW2 => "TW2", EPT_CU => "CU", EPT_AR => "AR", EPT_BK => "BK", EPT_EP => "EP", EPT_IN => "IN", EPT_MO => "MO", EPT_MT => "MT", EPT_OD => "OD", EPT_PV => "PV", EPT_SF => "SF", EPT_SK => "SK", EPT_SN => "SN", EPT_TR => "TR", EPT_TV => "TV", EPT_WT => "WT", EPT_LO => "LO", EPT_ST2 => "ST2", EPT_AC2 => "AC2", EPT_FC => "FC", EPT_SU => "SU", EPT_CT => "CT", EPT_SH => "SH", EPT_CH => "CH", EPT_HE => "HE", EPT_BI => "BI", EPT_CC => "CC", EPT_VL => "VL", EPT_FP => "FP", EPT_HD => "HD", EPT_LA => "LA", EPT_LG => "LG", EPT_CS => "CS", EPT_TP => "TP", EPT_BC => "BC", EPT_US => "US", EPT_SE => "SE", EPT_AE => "AE", EPT_CE => "CE", EPT_SO => "SO", EPT_S1 => "S1", EPT_S2 => "S2", EPT_S3 => "S3", EPT_S4 => "S4", EPT_SV => "SV", EPT_STW => "STW", EPT_SSP => "SSP", EPT_SNP => "SNP", EPT_SVE => "SVE", EPT_HQ => "HQ", EPT_EB => "EB", EPT_LB2 => "LB2", EPT_STR => "STR", EPT_LPA => "LPA", EPT_LTR => "LTR", EPT_FF => "FF", EPT_SQV => "SQV", EPT_BQV => "BQV", EPT_HQV => "HQV", EPT_UDCN => "UDCN", EPT_ESP => "ESP", EPT_EHP => "EHP", EPT_BS2 => "BS2", EPT_V43 => "V43", EPT_V169 => "V169", EPT_S169 => "S169" } as Dictionary<EPT, String>;
